// Code generated by MockGen. DO NOT EDIT.
// Source: delayqueue/delay_queue.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDelayQueue is a mock of DelayQueue interface.
type MockDelayQueue[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockDelayQueueMockRecorder[T]
}

// MockDelayQueueMockRecorder is the mock recorder for MockDelayQueue.
type MockDelayQueueMockRecorder[T any] struct {
	mock *MockDelayQueue[T]
}

// NewMockDelayQueue creates a new mock instance.
func NewMockDelayQueue[T any](ctrl *gomock.Controller) *MockDelayQueue[T] {
	mock := &MockDelayQueue[T]{ctrl: ctrl}
	mock.recorder = &MockDelayQueueMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelayQueue[T]) EXPECT() *MockDelayQueueMockRecorder[T] {
	return m.recorder
}

// Chan mocks base method.
func (m *MockDelayQueue[T]) Chan() <-chan T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chan")
	ret0, _ := ret[0].(<-chan T)
	return ret0
}

// Chan indicates an expected call of Chan.
func (mr *MockDelayQueueMockRecorder[T]) Chan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chan", reflect.TypeOf((*MockDelayQueue[T])(nil).Chan))
}

// Offer mocks base method.
func (m *MockDelayQueue[T]) Offer(elem T, expireation int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Offer", elem, expireation)
}

// Offer indicates an expected call of Offer.
func (mr *MockDelayQueueMockRecorder[T]) Offer(elem, expireation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offer", reflect.TypeOf((*MockDelayQueue[T])(nil).Offer), elem, expireation)
}

// Poll mocks base method.
func (m *MockDelayQueue[T]) Poll(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Poll", ctx)
}

// Poll indicates an expected call of Poll.
func (mr *MockDelayQueueMockRecorder[T]) Poll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockDelayQueue[T])(nil).Poll), ctx)
}

// Size mocks base method.
func (m *MockDelayQueue[T]) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockDelayQueueMockRecorder[T]) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockDelayQueue[T])(nil).Size))
}
