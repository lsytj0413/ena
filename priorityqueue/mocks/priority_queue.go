// Code generated by MockGen. DO NOT EDIT.
// Source: priorityqueue/priority_queue.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	priorityqueue "github.com/lsytj0413/ena/priorityqueue"
)

// MockPriorityQueue is a mock of PriorityQueue interface.
type MockPriorityQueue[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockPriorityQueueMockRecorder[T]
}

// MockPriorityQueueMockRecorder is the mock recorder for MockPriorityQueue.
type MockPriorityQueueMockRecorder[T any] struct {
	mock *MockPriorityQueue[T]
}

// NewMockPriorityQueue creates a new mock instance.
func NewMockPriorityQueue[T any](ctrl *gomock.Controller) *MockPriorityQueue[T] {
	mock := &MockPriorityQueue[T]{ctrl: ctrl}
	mock.recorder = &MockPriorityQueueMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriorityQueue[T]) EXPECT() *MockPriorityQueueMockRecorder[T] {
	return m.recorder
}

// Add mocks base method.
func (m *MockPriorityQueue[T]) Add(v T, priority int64) *priorityqueue.Element[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", v, priority)
	ret0, _ := ret[0].(*priorityqueue.Element[T])
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPriorityQueueMockRecorder[T]) Add(v, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPriorityQueue[T])(nil).Add), v, priority)
}

// Peek mocks base method.
func (m *MockPriorityQueue[T]) Peek() *priorityqueue.Element[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek")
	ret0, _ := ret[0].(*priorityqueue.Element[T])
	return ret0
}

// Peek indicates an expected call of Peek.
func (mr *MockPriorityQueueMockRecorder[T]) Peek() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockPriorityQueue[T])(nil).Peek))
}

// Pop mocks base method.
func (m *MockPriorityQueue[T]) Pop() *priorityqueue.Element[T] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pop")
	ret0, _ := ret[0].(*priorityqueue.Element[T])
	return ret0
}

// Pop indicates an expected call of Pop.
func (mr *MockPriorityQueueMockRecorder[T]) Pop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pop", reflect.TypeOf((*MockPriorityQueue[T])(nil).Pop))
}

// Remove mocks base method.
func (m *MockPriorityQueue[T]) Remove(v *priorityqueue.Element[T]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPriorityQueueMockRecorder[T]) Remove(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPriorityQueue[T])(nil).Remove), v)
}

// Size mocks base method.
func (m *MockPriorityQueue[T]) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockPriorityQueueMockRecorder[T]) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockPriorityQueue[T])(nil).Size))
}

// Update mocks base method.
func (m *MockPriorityQueue[T]) Update(v *priorityqueue.Element[T], priority int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", v, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPriorityQueueMockRecorder[T]) Update(v, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPriorityQueue[T])(nil).Update), v, priority)
}
